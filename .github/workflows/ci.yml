name: CI Pipeline

on:
  push:
    branches:
      - dev
      - master
      - hotfix
  pull_request:
    branches:
      - master

jobs:
  lint-test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - "5432:5432"
        options: >-
          --health-cmd=pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    environment: DB_DATA
    strategy:
      matrix:
        python-version: [3.13]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }}; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done
          echo "Failed to connect to PostgreSQL."
          exit 1
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      
      - name: Apply database migrations
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: postgresql+asyncpg://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}

      - name: Check formatting with black
        run: black . -l 79 --check --diff

      - name: Check import order with isort
        run: isort . --check-only --diff --profile black

      - name: Run flake8
        run: flake8 . --exclude=./app/core/__init__.py,./app/schemas/__init__.py,./tests/__init__.py,./alembic/*

      - name: Type check with mypy
        run: mypy app
      
      - name: Create .env file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "TESTING=${{ secrets.TESTING }}" >> .env

      - name: Run tests with coverage
        run: |
          coverage run -m pytest -v
          coverage report --fail-under=90