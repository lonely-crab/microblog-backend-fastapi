"""Initial revision

Revision ID: df600b161652
Revises:
Create Date: 2025-09-27 14:12:21.746274

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "df600b161652"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("media")
    op.drop_table("likes")
    op.drop_table("followers")
    op.drop_table("tweets")
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('users_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "api_key", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint(
            "api_key",
            name="users_api_key_key",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "tweets",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('tweets_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("content", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "author_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["author_id"], ["users.id"], name="tweets_author_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="tweets_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "followers",
        sa.Column(
            "follower_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "following_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["follower_id"],
            ["users.id"],
            name=op.f("followers_follower_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["following_id"],
            ["users.id"],
            name=op.f("followers_following_id_fkey"),
        ),
        sa.PrimaryKeyConstraint(
            "follower_id", "following_id", name=op.f("followers_pkey")
        ),
    )
    op.create_table(
        "likes",
        sa.Column(
            "user_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "tweet_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["tweet_id"], ["tweets.id"], name=op.f("likes_tweet_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("likes_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "tweet_id", name=op.f("likes_pkey")
        ),
    )
    op.create_table(
        "media",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "file_path", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "tweet_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["tweet_id"], ["tweets.id"], name=op.f("media_tweet_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("media_pkey")),
    )
    # ### end Alembic commands ###
